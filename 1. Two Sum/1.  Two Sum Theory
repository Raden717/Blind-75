Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 

Constraints:

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.
 

Follow-up: Can you come up with an algorithm that is less than O(n^2) time complexity?

BRUTE FORCE METHOD:
Looping through the entire array one by one by getting the current indice and adding every possible value after it, if we cannot find a matching pair, we continue the loop. The following indice has no need to look at the previous value.

OPTIMAL SOLUTION:
Since we are looking for two values, we can just look at the difference between the target number and current number we are looking at whilst looping and then looking for the difference in the array. The best way to do this, as to not have duplicates is by creating a HashMap of the array due to the find times of a Hashmap
By doing this, if we try looking for the difference and it is not contained in the hashmap, we can continue on.
